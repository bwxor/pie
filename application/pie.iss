; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "pie"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "Mario-Mihai MateaÈ™"
#define MyAppURL "https://www.docsbymario.com"
#define MyAppExeName "pie.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{AA5F7E05-777B-48D6-A081-2F8E6E3FADA5}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
UninstallDisplayIcon={app}\{#MyAppExeName}
; "ArchitecturesAllowed=x64compatible" specifies that Setup cannot run
; on anything but x64 and Windows 11 on Arm.
ArchitecturesAllowed=x64compatible
; "ArchitecturesInstallIn64BitMode=x64compatible" requests that the
; install be done in "64-bit mode" on x64 or Windows 11 on Arm,
; meaning it should use the native 64-bit Program Files directory and
; the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64compatible
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only).
;PrivilegesRequired=lowest
OutputBaseFilename=setup
SolidCompression=yes
WizardStyle=modern
SetupIconFile=C:\git\pie\application\pie.ico
LicenseFile=C:\git\pie\application\LICENSE

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\git\pie\application\bin\Release\net8.0-windows7.0\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\git\pie\application\bin\Release\net8.0-windows7.0\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\git\pie\application\LICENSE"; DestDir: "LICENSE"
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Code]
function IsDotNet8VersionAtLeast(minPatch: Integer): Boolean;
var
  DotNetVersionString: String;
  major, minor, patch: Integer;
  firstDotPos, secondDotPos, thirdDotPos: Integer;
  userResponse: Integer;
  ErrorCode: Integer;
begin
  Result := False;

  // Try to read the 'Version' string from the sharedhost key
  if RegQueryStringValue(HKEY_LOCAL_MACHINE,
    'SOFTWARE\dotnet\Setup\InstalledVersions\x64\sharedhost',
    'Version',
    DotNetVersionString) then
  begin
    // Expected format: "8.0.x.y" or "8.0.x"
    firstDotPos := Pos('.', DotNetVersionString);
    if firstDotPos = 0 then Exit;

    major := StrToIntDef(Copy(DotNetVersionString, 1, firstDotPos - 1), 0);

    secondDotPos := Pos('.', Copy(DotNetVersionString, firstDotPos + 1, Length(DotNetVersionString)));
    if secondDotPos = 0 then
    begin
      minor := StrToIntDef(Copy(DotNetVersionString, firstDotPos + 1, Length(DotNetVersionString)), 0);
      patch := 0;
    end
    else
    begin
      secondDotPos := firstDotPos + secondDotPos;
      minor := StrToIntDef(Copy(DotNetVersionString, firstDotPos + 1, secondDotPos - (firstDotPos + 1)), 0);

      thirdDotPos := Pos('.', Copy(DotNetVersionString, secondDotPos + 1, Length(DotNetVersionString)));
      if thirdDotPos = 0 then
        patch := StrToIntDef(Copy(DotNetVersionString, secondDotPos + 1, Length(DotNetVersionString)), 0)
      else
      begin
        thirdDotPos := secondDotPos + thirdDotPos;
        patch := StrToIntDef(Copy(DotNetVersionString, secondDotPos + 1, thirdDotPos - (secondDotPos + 1)), 0);
      end;
    end;

    // Check if it's .NET 8.0.x and the patch is sufficient
    if (major = 8) and (minor = 0) and (patch >= minPatch) then
      Result := True;
  end;
end;

function IsVCRedistInstalled: Boolean;
var
  Installed: Boolean;
begin
  Installed := RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\VisualStudio\14.0\VC\Runtimes\x64');
  Result := Installed;
end;


procedure InitializeWizard;
var
  ErrorCode: Integer;
begin
  if not IsDotNet8VersionAtLeast(13) then
  begin
    if MsgBox('This application requires .NET Framework 8.0.13. Would you like to install it now?', 
      mbConfirmation, MB_YESNO) = IDYES then
    begin
      ShellExec('open', 'https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-8.0.406-windows-x64-installer', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode)
      Abort;  // Stop installation until .NET is installed
    end
    else
    begin
      MsgBox('The installation cannot proceed without .NET Framework 8.0.13.', mbError, MB_OK);
      Abort;
    end;
  end;
  
  if not IsVCRedistInstalled then
  begin
    if MsgBox('This application requires the Microsoft Visual C++ Redistributable. Install it now?', 
      mbConfirmation, MB_YESNO) = IDYES then
    begin
      ShellExec('open', 'https://aka.ms/vs/17/release/vc_redist.x64.exe', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
      Abort;  // Stop installation until Visual C++ is installed
    end
    else
    begin
      MsgBox('The installation cannot proceed without Visual C++ Redistributable.', mbError, MB_OK);
      Abort;
    end;
  end;
end;

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

